{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FastAPI","text":""},{"location":"#vlastnosti","title":"Vlastnosti","text":"<p>FastAPI je modern\u00ed, rychl\u00fd (vysoce v\u00fdkonn\u00fd), webov\u00fd r\u00e1mec pro vytv\u00e1\u0159en\u00ed API s Pythonem 3.7+ zalo\u017een\u00fd na standardn\u00edch typov\u00fdch n\u00e1pov\u011bd\u00e1ch Pythonu (type hints).</p> <p>Kl\u00ed\u010dov\u00e9 vlastnosti jsou:</p> <ul> <li>Rychlost: Velmi vysok\u00fd v\u00fdkon, na stejn\u00e9 \u00farovni s NodeJS and Go (d\u00edky Starlette a Pydantic).</li> <li>Rychl\u00e9 k\u00f3dov\u00e1n\u00ed: Zvy\u0161te rychlost v\u00fdvoje funkc\u00ed p\u0159ibli\u017en\u011b o 200 % a\u017e 300 %.</li> <li>M\u00e9n\u011b chyb: Sni\u017ete p\u0159ibli\u017en\u011b 40 % chyb zp\u016fsoben\u00fdch \u010dlov\u011bkem (v\u00fdvoj\u00e1\u0159em).</li> <li>Intuitivn\u00ed: Skv\u011bl\u00e1 podpora editoru. Auto n\u00e1pov\u011bda. M\u00e9n\u011b debugov\u00e1n\u00ed.</li> <li>Jednoduchost: Navr\u017eeno pro snadn\u00e9 pou\u017eit\u00ed a u\u010den\u00ed. M\u00e9n\u011b \u010dasu str\u00e1ven\u00e9ho \u010dten\u00edm dokumentace.</li> <li>Stru\u010dnost: Minimalizujte duplicitu k\u00f3du.V\u00edcero vlastnost\u00ed z ka\u017ed\u00e9 deklarace parametru. M\u00e9n\u011b chyb.</li> <li>Robustnost: Z\u00edskejte k\u00f3d p\u0159ipraven\u00fd pro produkci. S automatickou interaktivn\u00ed dokumentac\u00ed.</li> <li>Na z\u00e1klad\u011b norem: Zalo\u017eeno na (a pln\u011b kompatibiln\u00ed s) otev\u0159en\u00fdmi standardy pro API: OpenAPI (previously known as Swagger) and JSON Schema.</li> </ul> <p> </p>"},{"location":"async/","title":"Konkurence  async / await","text":"<p>Podrobnosti o syntaxi <code>async def</code> pro funkce operace cesty a n\u011bkter\u00e9 pozad\u00ed o asynchronn\u00edm k\u00f3du, soub\u011b\u017enosti a paralelismu.</p>"},{"location":"async/#ve-spechu","title":"Ve sp\u011bchu?","text":"<p>TL;DR:</p> <p>Pokud pou\u017e\u00edv\u00e1te knihovny t\u0159et\u00edch stran, kter\u00e9 v\u00e1m \u0159\u00edkaj\u00ed, abyste je zavolali pomoc\u00ed <code>await</code>, nap\u0159\u00edklad:</p> <pre><code>results = await some_library()\n</code></pre> <p>Pot\u00e9 deklarujte sv\u00e9 funkce operace cesty pomoc\u00ed <code>async def</code> jako:</p> <pre><code>@app.get('/')\nasync def read_results():\nresults = await some_library()\n    return results\n</code></pre> <p>Note</p> <p><code>await</code> m\u016f\u017eete pou\u017e\u00edt pouze uvnit\u0159 funkc\u00ed vytvo\u0159en\u00fdch pomoc\u00ed <code>async def</code>.</p> <p>Pokud pou\u017e\u00edv\u00e1te knihovnu t\u0159et\u00ed strany, kter\u00e1 s n\u011b\u010d\u00edm komunikuje (datab\u00e1z\u00ed, rozhran\u00edm API, souborov\u00fdm syst\u00e9mem atd.) a nem\u00e1 podporu pro pou\u017eit\u00ed <code>await</code>, (to je v sou\u010dasnosti p\u0159\u00edpad v\u011bt\u0161iny datab\u00e1zov\u00fdch knihoven), pak deklarujte sv\u00e9 funkce operace cesty jako norm\u00e1ln\u011b, pouze s <code>def</code>, jako:</p> <pre><code>@app.get('/')\ndef results():\nresults = some_library()\n    return results\n</code></pre> <p>Pokud va\u0161e aplikace (n\u011bjak) nemus\u00ed komunikovat s ni\u010d\u00edm jin\u00fdm a \u010dekat, a\u017e zareaguje, pou\u017eijte <code>async def</code>.</p> <p>Pokud si nejste jisti, pou\u017eijte norm\u00e1ln\u00ed <code>def</code>.</p> <p>Pozn\u00e1mka: M\u016f\u017eete kombinovat <code>def</code> a <code>async def</code> ve sv\u00fdch funkc\u00edch operace cesty jakkoli pot\u0159ebujete, a ka\u017edou z nich definovat pomoc\u00ed nejvhodn\u011bj\u0161\u00ed mo\u017enosti. FastAPI s nimi ud\u011bl\u00e1 spr\u00e1vnou v\u011bc.</p> <p>Ka\u017edop\u00e1dn\u011b v kter\u00e9mkoli z v\u00fd\u0161e uveden\u00fdch p\u0159\u00edpad\u016f bude FastAPI st\u00e1le fungovat asynchronn\u011b a bude extr\u00e9mn\u011b rychl\u00e9.</p> <p>Ale podle v\u00fd\u0161e uveden\u00fdch krok\u016f bude schopna prov\u00e9st ur\u010dit\u00e9 optimalizace v\u00fdkonu.</p>"},{"location":"async/#technicke-detaily","title":"Technick\u00e9 detaily","text":"<p>Modern\u00ed verze Pythonu maj\u00ed podporu pro \"asynchronn\u00ed k\u00f3d\" pomoc\u00ed n\u011b\u010deho, co se naz\u00fdv\u00e1 \"coroutines\", se syntax\u00ed <code>async</code> a <code>await</code>.</p> <p>Pod\u00edvejme se na tuto fr\u00e1zi po \u010d\u00e1stech v n\u00e1sleduj\u00edc\u00edch \u010d\u00e1stech:</p> <ul> <li>Asynchronn\u00ed k\u00f3d</li> <li><code>async</code> and <code>await</code></li> <li>Coroutines</li> </ul>"},{"location":"async/#asynchronni-kod","title":"Asynchronn\u00ed k\u00f3d","text":"<p>Asynchronn\u00ed k\u00f3d jen znamen\u00e1, \u017ee jazyk m\u00e1 zp\u016fsob, jak sd\u011blit po\u010d\u00edta\u010di/programu, \u017ee v ur\u010dit\u00e9m bod\u011b k\u00f3du bude muset \ud83e\udd16 po\u010dkat, a\u017e n\u011bco-jin\u00e9ho skon\u010d\u00ed n\u011bkde jinde. \u0158ekn\u011bme, \u017ee n\u011b\u010demu jin\u00e9mu se \u0159\u00edk\u00e1 \"pomal\u00fd-soubor\".</p> <p>Tak\u017ee b\u011bhem t\u00e9 doby m\u016f\u017ee po\u010d\u00edta\u010d j\u00edt d\u011blat n\u011bjakou jinou pr\u00e1ci, zat\u00edmco \u201epomal\u00fd soubor\u201c skon\u010d\u00ed. Potom se po\u010d\u00edta\u010d / program vr\u00e1t\u00ed poka\u017ed\u00e9, kdy\u017e bude m\u00edt p\u0159\u00edle\u017eitost, proto\u017ee znovu \u010dek\u00e1, nebo kdykoli dokon\u010d\u00ed v\u0161echnu pr\u00e1ci, kterou v tu chv\u00edli m\u011bl.A uvid\u00ed, jestli n\u011bkter\u00fd z \u00fakol\u016f, na kter\u00fd \u010dekal, u\u017e skon\u010dil, a ud\u011blal, co ud\u011blat m\u011bl.</p> <p>D\u00e1le vezme prvn\u00ed \u00fakol k dokon\u010den\u00ed (\u0159ekn\u011bme n\u00e1\u0161 \u201epomal\u00fd-soubor\u201c ) a pokra\u010duje ve v\u0161em, co s t\u00edm m\u011blo spole\u010dn\u00e9ho.</p> <p>To \"po\u010dkej na n\u011bco jin\u00e9ho\" norm\u00e1ln\u011b odkazuje I/O operace, kter\u00e9 jsou relativn\u011b \u201epomal\u00e9\u201c (ve srovn\u00e1n\u00ed s rychlost\u00ed procesoru a pam\u011bti RAM), jako je \u010dek\u00e1n\u00ed na:</p> <ul> <li>data od klienta, kter\u00e1 maj\u00ed b\u00fdt odesl\u00e1na p\u0159es s\u00ed\u0165</li> <li>data odeslan\u00e1 va\u0161\u00edm programem, kter\u00e1 maj\u00ed b\u00fdt p\u0159ijata klientem prost\u0159ednictv\u00edm s\u00edt\u011b</li> <li>obsah souboru na disku, kter\u00fd m\u00e1 b\u00fdt p\u0159e\u010dten syst\u00e9mem a p\u0159ed\u00e1n va\u0161emu programu</li> <li>obsah, kter\u00fd v\u00e1\u0161 program dal syst\u00e9mu k z\u00e1pisu na disk</li> <li>vzd\u00e1len\u00e1 API operace</li> <li>datab\u00e1zov\u00e1 operace k dokon\u010den\u00ed</li> <li>datab\u00e1zov\u00fd dotaz pro vr\u00e1cen\u00ed v\u00fdsledk\u016f</li> <li>atd.</li> </ul> <p>Proto\u017ee doba realizace je spot\u0159ebov\u00e1na v\u011bt\u0161inou \u010dek\u00e1n\u00edm I/O operace, naz\u00fdvaj\u00ed je operacemi \u201eI/O bound\u201c.</p> <p>\u0158\u00edk\u00e1 se tomu \u201easynchronn\u00ed\u201c, proto\u017ee po\u010d\u00edta\u010d/program nemus\u00ed b\u00fdt \u201esynchronizov\u00e1n\u201c s pomalou \u00falohou, \u010dekat na p\u0159esn\u00fd okam\u017eik, kdy \u00faloha skon\u010d\u00ed, a p\u0159itom nic ned\u011blat, aby mohl vz\u00edt v\u00fdsledek \u00falohy a pokra\u010dovat v pr\u00e1ci. .</p> <p>Nam\u00edsto toho, proto\u017ee je to \u201easynchronn\u00ed\u201c syst\u00e9m, po dokon\u010den\u00ed m\u016f\u017ee \u00fakol chv\u00edli \u010dekat ve front\u011b (n\u011bkolik mikrosekund), ne\u017e po\u010d\u00edta\u010d / program dokon\u010d\u00ed, co ud\u011blal, a pak se vr\u00e1tit a vz\u00edt si v\u00fdsledky a s nimi d\u00e1le pracovat.</p> <p>Pro \u201esynchronn\u00ed\u201c (na rozd\u00edl od \u201easynchronn\u00edho\u201c) se b\u011b\u017en\u011b tak\u00e9 pou\u017e\u00edv\u00e1\u201c term\u00edn \u201esekven\u010dn\u00ed\u201c, proto\u017ee po\u010d\u00edta\u010d/program n\u00e1sleduje v\u0161echny kroky v po\u0159ad\u00ed p\u0159ed p\u0159epnut\u00edm na jinou \u00falohu, i kdy\u017e tyto kroky zahrnuj\u00ed \u010dek\u00e1n\u00ed.</p> <p>D\u00edky tomuto druhu asynchronicity je NodeJS popul\u00e1rn\u00ed (i kdy\u017e NodeJS nen\u00ed paraleln\u00ed) a to je s\u00edla Go jako programovac\u00edho jazyka.</p> <p>A to je stejn\u00e1 \u00farove\u0148 v\u00fdkonu, jakou z\u00edsk\u00e1te s FastAPI.</p> <p>A proto\u017ee m\u016f\u017eete m\u00edt paralelismus a asynchronitu z\u00e1rove\u0148, z\u00edsk\u00e1te vy\u0161\u0161\u00ed v\u00fdkon ne\u017e v\u011bt\u0161ina testovan\u00fdch r\u00e1mc\u016f NodeJS a srovnateln\u00fd s Go, co\u017e je kompilovan\u00fd jazyk bl\u00ed\u017ee C (to v\u0161e d\u00edky Starlette).</p>"},{"location":"async/#je-soubeznost-lepsi-nez-paralelismus","title":"Je soub\u011b\u017enost lep\u0161\u00ed ne\u017e paralelismus?","text":"<p>Ani n\u00e1hodou! To nen\u00ed mor\u00e1lka p\u0159\u00edb\u011bhu.</p> <p>Soub\u011b\u017enost je n\u011bco jin\u00e9ho ne\u017e paralelismus. A je to lep\u0161\u00ed na specifick\u00fdch sc\u00e9n\u00e1\u0159\u00edch, kter\u00e9 vy\u017eaduj\u00ed hodn\u011b \u010dek\u00e1n\u00ed. Z tohoto d\u016fvodu je pro v\u00fdvoj webov\u00fdch aplikac\u00ed obecn\u011b mnohem lep\u0161\u00ed ne\u017e paralelismus.Ale ne na v\u0161echno.</p> <p>Abychom to vyv\u00e1\u017eili, p\u0159edstavte si n\u00e1sleduj\u00edc\u00ed kr\u00e1tk\u00fd p\u0159\u00edb\u011bh:</p> <p>Mus\u00edte uklidit velk\u00fd, \u0161pinav\u00fd d\u016fm.</p> <p>Jo, to je cel\u00fd p\u0159\u00edb\u011bh.</p> <p>Na nic se ne\u010dek\u00e1 \ud83d\udd59, v\u0161e je k dispozici, jen je t\u0159eba ud\u011blat spoustu pr\u00e1ce na v\u00edce m\u00edstech v dom\u011b.</p> <p>Mohli byste st\u0159\u00eddat m\u00edstnosti , nejd\u0159\u00edv ob\u00fdv\u00e1k, pak kuchy\u0148, ale jeliko\u017e na nic ne\u010dek\u00e1te \ud83d\udd59, \u00faklid je \u00faklid,  st\u0159\u00eddat m\u00edstnosti by nic neovlivnilo.</p> <p>Dokon\u010den\u00ed se st\u0159\u00edd\u00e1n\u00edm nebo bez n\u011bj by trvalo stejn\u011b dlouho (soub\u011bh) a ud\u011blali byste stejn\u00e9 mno\u017estv\u00ed pr\u00e1ce.</p> <p>Ale v  p\u0159\u00edpad\u011b, kdybyste mohli p\u0159iv\u00e9st 8 p\u0159\u00e1tel, a ka\u017ed\u00fd z nich (plus vy) by si mohl vz\u00edt z\u00f3nu domu, aby ho ukl\u00edzel, ve\u0161kerou pr\u00e1ci byste mohli d\u011blat paraleln\u011b s extra pomoc\u00ed a skon\u010dit mnohem d\u0159\u00edve.</p> <p>V tomto sc\u00e9n\u00e1\u0159i by ka\u017ed\u00fd z \u010disti\u010d\u016f (v\u010detn\u011b v\u00e1s) byl procesor, kter\u00fd by d\u011blal svou \u010d\u00e1st pr\u00e1ce.</p> <p>A proto\u017ee v\u011bt\u0161inu \u010dasu prov\u00e1d\u011bn\u00ed zab\u00edr\u00e1 skute\u010dn\u00e1 pr\u00e1ce (m\u00edsto \u010dek\u00e1n\u00ed) a pr\u00e1ci v po\u010d\u00edta\u010di prov\u00e1d\u00ed CPU, naz\u00fdvaj\u00ed se tyto probl\u00e9my \"CPU bound\".</p> <p>B\u011b\u017en\u00e9 p\u0159\u00edklady operac\u00ed v\u00e1zan\u00fdch na CPU jsou v\u011bci, kter\u00e9 vy\u017eaduj\u00ed slo\u017eit\u00e9 matematick\u00e9 zpracov\u00e1n\u00ed.</p> <p>Nap\u0159\u00edklad:</p> <ul> <li>Audio nebo image processing.</li> <li> <p>Computer vision obr\u00e1zek se skl\u00e1d\u00e1 z milion\u016f pixel\u016f, ka\u017ed\u00fd pixel m\u00e1 3 hodnoty / barvy, zpracov\u00e1n\u00ed norm\u00e1ln\u011b vy\u017eaduje n\u011bco na t\u011bchto pixelech vypo\u010d\u00edtat a to v\u0161e sou\u010dasn\u011b.</p> </li> <li> <p>Strojov\u00e9 u\u010den\u00ed: vy\u017eaduje spoustu \"maticov\u00fdch\" a \"vektorov\u00fdch\" n\u00e1soben\u00ed. P\u0159edstavte si obrovskou tabulku s \u010d\u00edsly a vyn\u00e1sobte je v\u0161echny najednou.</p> </li> <li> <p>Deep Learning: toto je podobor strojov\u00e9ho u\u010den\u00ed, tak\u017ee plat\u00ed tot\u00e9\u017e. Jde jen o to, \u017ee neexistuje jen jedin\u00e1 tabulka \u010d\u00edsel k n\u00e1soben\u00ed, ale jejich obrovsk\u00e1 sada a v mnoha p\u0159\u00edpadech k sestaven\u00ed a/nebo pou\u017eit\u00ed t\u011bchto model\u016f pou\u017e\u00edv\u00e1te speci\u00e1ln\u00ed procesor.</p> </li> </ul>"},{"location":"async/#async-and-await","title":"<code>async</code> and <code>await</code>","text":"<p>Modern\u00ed verze Pythonu maj\u00ed velmi intuitivn\u00ed zp\u016fsob, jak definovat asynchronn\u00ed k\u00f3d. D\u00edky tomu to vypad\u00e1 jako norm\u00e1ln\u00ed \u201esekven\u010dn\u00ed\u201c k\u00f3d co \u201epo\u010dk\u00e1\u201c ve spr\u00e1vn\u00fdch okam\u017eic\u00edch.</p> <p>Kdy\u017e dojde k operaci, kter\u00e1 bude vy\u017eadovat \u010dek\u00e1n\u00ed p\u0159ed poskytnut\u00edm v\u00fdsledk\u016f a m\u00e1 podporu pro tyto nov\u00e9 funkce Pythonu, m\u016f\u017eete ji nak\u00f3dovat takto:</p> <pre><code>burgers = await get_burgers(2)\n</code></pre> <p>Kl\u00ed\u010dem je zde <code>await</code>. \u0158\u00edk\u00e1 Pythonu, \u017ee mus\u00ed po\u010dkat \u23f8 na <code>get_burgers(2)</code> dokon\u010dit svou v\u011bc \ud83d\udd59 p\u0159ed ulo\u017een\u00edm v\u00fdsledk\u016f do <code>burgers</code>. D\u00edky tomu Python bude v\u011bd\u011bt, \u017ee m\u016f\u017ee j\u00edt a mezit\u00edm ud\u011blat n\u011bco jin\u00e9ho \ud83d\udd00 \u23ef (nap\u0159\u00edklad p\u0159ijmout dal\u0161\u00ed po\u017eadavek).</p> <p>Aby <code>await</code> fungovalo, mus\u00ed b\u00fdt uvnit\u0159 funkce, kter\u00e1 tuto asynchronitu podporuje. Chcete-li to prov\u00e9st, sta\u010d\u00ed jej deklarovat pomoc\u00ed <code>async def</code>:</p> <pre><code>async def get_burgers(number: int):\n# Do some asynchronous stuff to create the burgers\n    return burgers\n</code></pre> <p>...m\u00edsto <code>def</code>:</p> <pre><code># This is not asynchronous\ndef get_sequential_burgers(number: int):\n# Do some sequential stuff to create the burgers\n    return burgers\n</code></pre> <p>S <code>async def</code> Python v\u00ed, \u017ee uvnit\u0159 t\u00e9to funkce si mus\u00ed b\u00fdt v\u011bdom v\u00fdraz\u016f <code>await</code> a \u017ee m\u016f\u017ee \u201epozastavit\u201c \u23f8 prov\u00e1d\u011bn\u00ed t\u00e9to funkce a j\u00edt d\u011blat n\u011bco jin\u00e9ho \ud83d\udd00, ne\u017e se vr\u00e1t\u00ed. Kdy\u017e chcete volat funkci <code>async def</code>, mus\u00edte na ni \u201e\u010dekat\u201c. Tohle nebude fungovat:</p> <pre><code># Toto nebude fungovat, proto\u017ee get_burgers byl definov\u00e1n pomoc\u00ed: async def\nburgers = get_burgers(2)\n</code></pre> <p>Pokud tedy pou\u017e\u00edv\u00e1te knihovnu, kter\u00e1 v\u00e1m \u0159\u00edk\u00e1, \u017ee ji m\u016f\u017eete volat pomoc\u00ed <code>await</code>, mus\u00edte vytvo\u0159it funkce operace cesty, kter\u00e9 ji pou\u017e\u00edvaj\u00ed s <code>async def</code>, jako v:</p> <pre><code>@app.get('/burgers')\nasync def read_burgers():\nburgers = await get_burgers(2)\nreturn burgers\n</code></pre>"},{"location":"async/#dalsi-technicke-detaily","title":"Dal\u0161\u00ed technick\u00e9 detaily","text":"<p>Mo\u017en\u00e1 jste si v\u0161imli, \u017ee <code>await</code> lze pou\u017e\u00edt pouze uvnit\u0159 funkc\u00ed definovan\u00fdch pomoc\u00ed <code>async def</code>.</p> <p>Z\u00e1rove\u0148 v\u0161ak mus\u00ed b\u00fdt funkce definovan\u00e9 pomoc\u00ed <code>async def</code> \"o\u010dek\u00e1v\u00e1ny\" (\"awaited\").Tak\u017ee funkce s <code>async def</code> lze volat pouze uvnit\u0159 funkc\u00ed definovan\u00fdch pomoc\u00ed <code>async def</code>.</p> <p>Tak\u017ee, pokud jde o vejce nebo ku\u0159e, jak zavol\u00e1te prvn\u00ed funkci <code>async</code>?</p> <p>Pokud pracujete s FastAPI, nemus\u00edte se o to starat, proto\u017ee tato \u201eprvn\u00ed\u201c funkce bude va\u0161e funkce operace cesty a FastAPI bude v\u011bd\u011bt, jak ud\u011blat spr\u00e1vnou v\u011bc.</p>"},{"location":"async/#coroutines","title":"Coroutines","text":"<p>Coroutine je jen  term\u00edn pro v\u011bc vr\u00e1cenou funkc\u00ed <code>async def</code>. Python v\u00ed, \u017ee je to n\u011bco jako funkce, kterou m\u016f\u017ee spustit a \u017ee v ur\u010dit\u00e9m okam\u017eiku skon\u010d\u00ed, ale \u017ee m\u016f\u017ee b\u00fdt pozastavena \u23f8 i intern\u011b, kdykoli je \"await\" uvnit\u0159.</p> <p>Ale ve\u0161ker\u00e1 tato funk\u010dnost pou\u017e\u00edv\u00e1n\u00ed asynchronn\u00edho k\u00f3du s <code>async</code> a <code>await</code> je mnohokr\u00e1t shrnuta jako pou\u017eit\u00ed \"coroutines\". Je srovnateln\u00fd s hlavn\u00edm kl\u00ed\u010dov\u00fdm prvkem Go, \u201eGoroutines\u201c.</p>"},{"location":"async/#zaver","title":"Z\u00e1v\u011br","text":"<p>Pod\u00edvejme se na zm\u00edn\u011bnou fr\u00e1zi:</p> <p>Modern\u00ed verze Pythonu maj\u00ed podporu pro \"asynchronn\u00ed k\u00f3d\" pomoc\u00ed n\u011b\u010deho, co se naz\u00fdv\u00e1 \"coroutines\", se syntax\u00ed <code>async</code> a <code>await</code>.</p> <p>To by te\u010f m\u011blo d\u00e1vat v\u011bt\u0161\u00ed smysl.</p> <p>To v\u0161e poh\u00e1n\u00ed FastAPI (prost\u0159ednictv\u00edm Starlette) a d\u00edky tomu m\u00e1 tak p\u016fsobiv\u00fd v\u00fdkon.</p>"},{"location":"tutorial/first-steps/","title":"Prvn\u00ed kroky","text":"<p>Nejjednodu\u0161\u0161\u00ed soubor FastAPI by mohl vypadat takto: <pre><code>from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n</code></pre></p> <p>Zkop\u00edrujte to do souboru <code>main.py</code>.</p> <p>Spus\u0165te \u017eiv\u00fd server:</p> <pre><code>$ uvicorn main:app --reload\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Started reloader process [28720]\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Started server process [28722]\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Waiting for application startup.\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Application startup complete.\n</code></pre> <p>Note</p> <p>P\u0159\u00edkaz <code>uvicorn main:app</code> odkazuje na:</p> <ul> <li><code>main</code>: soubor <code>main.py</code> (Python \"module\").</li> <li><code>app</code>: objekt vytvo\u0159en\u00fd uvnit\u0159 <code>main.py</code> na \u0159\u00e1dku s <code>app = FastAPI()</code>.</li> <li><code>--reload</code>: po zm\u011bn\u011b k\u00f3du restartujte server. Pou\u017e\u00edvejte pouze pro v\u00fdvoj.</li> </ul> <p>Ve v\u00fdstupu je \u0159\u00e1dek s n\u011b\u010d\u00edm jako:</p> <pre><code>INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>Tento \u0159\u00e1dek zobrazuje adresu URL, na kter\u00e9 se va\u0161e aplikace zobrazuje na va\u0161em m\u00edstn\u00edm po\u010d\u00edta\u010di.</p>"},{"location":"tutorial/first-steps/#vyzkousej-to","title":"Vyzkou\u0161ej to","text":"<p>Otev\u0159ete prohl\u00ed\u017ee\u010d na adrese http://127.0.0.1:8000.</p> <p>Uvid\u00edte odezvu JSON jako: <pre><code>{\"message\": \"Hello World\"}\n</code></pre></p>"},{"location":"tutorial/first-steps/#interaktivni-api-dokumentace","title":"Interaktivn\u00ed  API dokumentace","text":"<p>Nyn\u00ed p\u0159ejd\u011bte na http://127.0.0.1:8000/docs.</p> <p>Zobraz\u00ed se automatick\u00e1 interaktivn\u00ed dokumentace API (provided by Swagger UI):</p> <p></p>"},{"location":"tutorial/first-steps/#alternativni-dokumentace-api","title":"Alternativn\u00ed dokumentace API","text":"<p>A te\u010f jd\u011bte na http://127.0.0.1:8000/redoc.</p> <p>Zobraz\u00ed se alternativn\u00ed automatick\u00e1 dokumentace (provided by ReDoc):</p> <p></p>"},{"location":"tutorial/first-steps/#openapi","title":"OpenAPI","text":"<p>FastAPI vygeneruje \"sch\u00e9ma\" se v\u0161emi va\u0161imi API pomoc\u00ed OpenAPI (standard pro definov\u00e1n\u00ed API).</p>"},{"location":"tutorial/first-steps/#schema","title":"\"Schema\"","text":"<p>\"Sch\u00e9ma\" je definice nebo popis n\u011b\u010deho. Ne k\u00f3d, kter\u00fd jej implementuje, ale pouze abstraktn\u00ed popis.</p>"},{"location":"tutorial/first-steps/#api-schema","title":"API \"schema\"","text":"<p>V tomto p\u0159\u00edpad\u011b, OpenAPI je specifikace, kter\u00e1 ur\u010duje, jak definovat sch\u00e9ma va\u0161ich API.</p> <p>Tato definice sch\u00e9matu zahrnuje cesty API, mo\u017en\u00e9 parametry, kter\u00e9 p\u0159ij\u00edmaj\u00ed, atd.</p>"},{"location":"tutorial/first-steps/#data-schema","title":"Data \"schema\"","text":"<p>Term\u00edn \"sch\u00e9ma\" m\u016f\u017ee tak\u00e9 odkazovat na tvar n\u011bkter\u00fdch dat, jako je obsah JSON. V tomto p\u0159\u00edpad\u011b by to znamenalo atributy JSON a datov\u00e9 typy, kter\u00e9 maj\u00ed, atd.</p>"},{"location":"tutorial/first-steps/#openapi-a-json-schema","title":"OpenAPI a JSON Schema","text":"<p>OpenAPI definuje API sch\u00e9ma pro va\u0161e API. A toto sch\u00e9ma zahrnuje definice (nebo \"schemata\") dat odeslan\u00fdch a p\u0159ijat\u00fdch va\u0161\u00edm API pomoc\u00ed JSON Schema, standard pro datov\u00e1 sch\u00e9mata JSON.</p>"},{"location":"tutorial/first-steps/#vice-o-openapijson","title":"V\u00edce o <code>openapi.json</code>","text":"<p>Pokud v\u00e1s zaj\u00edm\u00e1, jak vypad\u00e1 surov\u00e9 sch\u00e9ma OpenAPI, FastAPI automaticky generuje JSON (sch\u00e9ma) s popisy v\u0161ech va\u0161ich API.</p> <p>M\u016f\u017eete to vid\u011bt p\u0159\u00edmo na: http://127.0.0.1:8000/openapi.json.</p> <p>Uk\u00e1\u017ee to JSON za\u010d\u00ednaj\u00edc\u00ed n\u011b\u010d\u00edm jako: <pre><code>{\n\"openapi\": \"3.0.2\",\n\"info\": {\n\"title\": \"FastAPI\",\n\"version\": \"0.1.0\"\n},\n\"paths\": {\n\"/items/\": {\n\"get\": {\n\"responses\": {\n\"200\": {\n\"description\": \"Successful Response\",\n\"content\": {\n\"application/json\": {}}}}}}}}\n</code></pre></p>"},{"location":"tutorial/first-steps/#k-cemu-slouzi-openapi","title":"K \u010demu slou\u017e\u00ed OpenAPI","text":"<p>Sch\u00e9ma OpenAPI je to, co poh\u00e1n\u00ed dva zahrnut\u00e9 interaktivn\u00ed dokumenta\u010dn\u00ed syst\u00e9my.</p> <p>A existuj\u00ed des\u00edtky alternativ, v\u0161echny zalo\u017een\u00e9 na OpenAPI. Do sv\u00e9 aplikace m\u016f\u017eete snadno p\u0159idat kteroukoli z t\u011bchto alternativ vytvo\u0159enou s FastAPI.</p> <p>M\u016f\u017eete jej tak\u00e9 pou\u017e\u00edt k automatick\u00e9mu generov\u00e1n\u00ed k\u00f3du pro klienty, kte\u0159\u00ed komunikuj\u00ed s va\u0161\u00edm API. Nap\u0159\u00edklad frontendov\u00e9, mobiln\u00ed nebo IoT aplikace.</p>"},{"location":"tutorial/first-steps/#shrnuti-krok-za-krokem","title":"Shrnut\u00ed, krok za krokem","text":""},{"location":"tutorial/first-steps/#krok-1-import-fastapi","title":"Krok 1: import <code>FastAPI</code>","text":"<pre><code>from fastapi import FastAPI\napp = FastAPI()\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p><code>FastAPI</code>je t\u0159\u00edda Pythonu, kter\u00e1 poskytuje v\u0161echny funkce pro va\u0161e API.</p> <p>Technick\u00e9 \u00fadaje</p> <p><code>FastAPI</code> je t\u0159\u00edda, kter\u00e1 p\u0159\u00edmo d\u011bd\u00ed od <code>Starlette</code>.</p> <p>M\u016f\u017eete pou\u017e\u00edt v\u0161echny funkce Starlette  s <code>FastAPI</code>.</p>"},{"location":"tutorial/first-steps/#krok-2-vytvorit-fastapi-instanci","title":"Krok 2: vytvo\u0159it <code>FastAPI</code> \"instanci\"","text":"<pre><code>from fastapi import FastAPI\n\napp = FastAPI()\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>Zde bude prom\u011bnn\u00e1 <code>app</code> \"instanc\u00ed\" t\u0159\u00eddy <code>FastAPI</code>.</p> <p>Toto bude hlavn\u00ed bod interakce pro vytvo\u0159en\u00ed v\u0161ech va\u0161ich API.</p> <p>Tato \u201eapp\u201c je stejn\u00e1, jakou uv\u00e1d\u00ed \u201euvicorn\u201c v p\u0159\u00edkazu:</p> <pre><code>$ uvicorn main:app --reload\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre> <p>Pokud svou aplikaci vytvo\u0159\u00edte takto: <pre><code>from fastapi import FastAPI\n\nmy_awesome_api = FastAPI()\n@my_awesome_api.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n</code></pre></p> <p>A vlo\u017e\u00edte do souboru <code>main.py</code>, pak byste <code>uvicorn</code> spustili takto:</p> <pre><code>$ uvicorn main:my_awesome_api --reload\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n</code></pre>"},{"location":"tutorial/first-steps/#krok-3-vytvorit-path-operation","title":"Krok 3: vytvo\u0159it path operation","text":""},{"location":"tutorial/first-steps/#cesta","title":"Cesta","text":"<p>\"Cesta\" zde odkazuje na posledn\u00ed \u010d\u00e1st adresy URL za\u010d\u00ednaj\u00edc\u00ed prvn\u00edm <code>/</code>.</p> <p>Tak\u017ee v adrese URL jako: <pre><code>https://example.com/items/foo\n</code></pre></p> <p>... by cesta byla: <pre><code>/items/foo\n</code></pre></p> <p>Info</p> <p>\u201eCesta\u201c se tak\u00e9 b\u011b\u017en\u011b naz\u00fdv\u00e1 \u201ekoncov\u00fd bod\u201c (endpoint), nebo \u201etrasa\u201c (route).</p> <p>P\u0159i vytv\u00e1\u0159en\u00ed API je \u201ecesta\u201c hlavn\u00edm zp\u016fsobem, jak odd\u011blit \u201ezodpov\u011bdnosti\u201c a \u201ezdroje\u201c.</p>"},{"location":"tutorial/first-steps/#operacemetoda","title":"Operace/Metoda","text":"<p>\u201eOperace\u201c zde odkazuje na jednu z \u201emetod HTTP\u201c.</p> <p>Jednu z:</p> <ul> <li><code>POST</code></li> <li><code>GET</code></li> <li><code>PUT</code></li> <li><code>DELETE</code></li> </ul> <p>...a ty exoti\u010dt\u011bj\u0161\u00ed:</p> <ul> <li><code>OPTIONS</code></li> <li><code>HEAD</code></li> <li><code>PATCH</code></li> <li><code>TRACE</code></li> </ul> <p>V protokolu HTTP m\u016f\u017eete komunikovat s ka\u017edou cestou pomoc\u00ed jedn\u00e9 (nebo v\u00edce) z t\u011bchto \u201emetod\u201c.</p> <p>P\u0159i vytv\u00e1\u0159en\u00ed rozhran\u00ed API obvykle pou\u017e\u00edv\u00e1te tyto specifick\u00e9 metody HTTP k proveden\u00ed konkr\u00e9tn\u00ed akce.</p> <p>Norm\u00e1ln\u011b pou\u017e\u00edv\u00e1te:</p> <ul> <li><code>POST</code>: k vytvo\u0159en\u00ed dat.</li> <li><code>GET</code>: ke \u010dten\u00ed dat.</li> <li><code>PUT</code>: k aktualizaci dat.</li> <li><code>DELETE</code>: ke smaz\u00e1n\u00ed dat.</li> </ul> <p>V OpenAPI se tedy ka\u017ed\u00e1 z metod HTTP naz\u00fdv\u00e1 \u201eoperation\u201c.</p> <p>Budeme  jim tedy tak\u00e9 \u0159\u00edkat \u201eoperation\u201c.</p>"},{"location":"tutorial/first-steps/#definujeme-path-operation-dekorator","title":"Definujeme  path operation dekor\u00e1tor","text":"<pre><code>from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p><code>@app.get(\"/\")</code> \u0159\u00edk\u00e1 FastAPI \u017ee funkce pod dekor\u00e1torem m\u00e1 na starosti zpracov\u00e1n\u00ed po\u017eadavk\u016f, kter\u00e9 jdou na:</p> <ul> <li>cestu (path) <code>/</code></li> <li>pou\u017eit\u00edm <code>get</code> operation</li> </ul> <p><code>@dekor\u00e1tor</code> Info</p> <p><code>@n\u011bco</code> syntaxe v Pythonu se naz\u00fdv\u00e1 \"dekor\u00e1tor\".</p> <p>D\u00e1te to nad funkci. Jako p\u011bkn\u00fd dekorativn\u00ed klobouk (Mysl\u00edm, \u017ee odtud ten term\u00edn vznikl).</p> <p>\"Dekor\u00e1tor\" p\u0159evezme funkci n\u00ed\u017ee a n\u011bco s n\u00ed ud\u011bl\u00e1.     V na\u0161em p\u0159\u00edpad\u011b tento dekor\u00e1tor \u0159\u00edk\u00e1 FastAPI \u017ee funkce n\u00ed\u017ee koresponduje k path <code>/</code> s operation <code>get</code>.</p> <p>Je to \"dekor\u00e1tor operace cesty\".</p> <p>M\u016f\u017eete tak\u00e9 pou\u017e\u00edt dal\u0161\u00ed operace:</p> <ul> <li><code>@app.post()</code></li> <li><code>@app.put()</code></li> <li><code>@app.delete()</code></li> </ul> <p>A ty exoti\u010dt\u011bj\u0161\u00ed:</p> <ul> <li><code>@app.options()</code></li> <li><code>@app.head()</code></li> <li><code>@app.patch()</code></li> <li><code>@app.trace()</code></li> </ul> <p>Tip</p> <p>Ka\u017edou operaci (metodu HTTP) m\u016f\u017eete voln\u011b pou\u017e\u00edvat, jak chcete. FastAPI nevynucuje \u017e\u00e1dn\u00fd konkr\u00e9tn\u00ed v\u00fdznam. Zde uveden\u00e9 informace jsou uvedeny jako vod\u00edtko, nikoli jako po\u017eadavek. Nap\u0159\u00edklad, kdy\u017e pou\u017e\u00edv\u00e1te GraphQL, norm\u00e1ln\u011b prov\u00e1d\u00edte v\u0161echny akce pouze pomoc\u00ed operac\u00ed <code>POST</code>.</p>"},{"location":"tutorial/first-steps/#krok-4-definuj-path-operation-function","title":"Krok 4: definuj path operation function","text":"<p>Toto je na\u0161e \u201efunkce operace cesty\u201c:</p> <ul> <li>cesta (path): je <code>/</code>.</li> <li>operace (operation): je <code>get</code>.</li> <li>funkce: je funkce pod \"dekor\u00e1torem\" (<code>@app.get(\"/\")</code>).</li> </ul> <pre><code>from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/\")\nasync def root():\nreturn {\"message\": \"Hello World\"}\n</code></pre> <p>Toto je funkce Pythonu.</p> <p>Bude vol\u00e1na FastAPI, kdykoli obdr\u017e\u00edme po\u017eadavek na URL \"<code>/</code>\" pomoc\u00ed operace <code>GET</code>.</p> <p>V tomto p\u0159\u00edpad\u011b se jedn\u00e1 o <code>asynchronn\u00ed</code> funkci.</p> <p>M\u016f\u017eete ji tak\u00e9 definovat jako norm\u00e1ln\u00ed funkci nam\u00edsto <code>async def</code>:</p> <pre><code>from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/\")\ndef root():\nreturn {\"message\": \"Hello World\"}\n</code></pre> <p>Note</p> <p>Pokud nezn\u00e1te rozd\u00edl, pod\u00edvejte se na Async: \"In a hurry?\".</p>"},{"location":"tutorial/first-steps/#krok-5-vratit-obsah","title":"Krok 5: vr\u00e1tit obsah","text":"<pre><code>from fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/\")\nasync def root():\nreturn {\"message\": \"Hello World\"}\n</code></pre> <p>M\u016f\u017eete vr\u00e1tit <code>dict</code>, <code>list</code>, singul\u00e1rn\u00ed hodnoty jako <code>str</code>, <code>int</code> atd.</p> <p>M\u016f\u017eete tak\u00e9 vr\u00e1tit Pydantic modely (v\u00edce o tom pozd\u011bji).</p> <p>Existuje mnoho dal\u0161\u00edch objekt\u016f a model\u016f, kter\u00e9 budou automaticky p\u0159evedeny na JSON (v\u010detn\u011b ORM atd.). Zkuste pou\u017e\u00edt sv\u00e9 obl\u00edben\u00e9, je vysoce pravd\u011bpodobn\u00e9, \u017ee jsou ji\u017e podporov\u00e1ny.</p>"},{"location":"tutorial/first-steps/#shrnuti","title":"Shrnut\u00ed","text":"<ul> <li>Import <code>FastAPI</code>.</li> <li>Vytvo\u0159te <code>app</code> instanci.</li> <li>Napi\u0161te path operation dekor\u00e1tor (like <code>@app.get(\"/\")</code>).</li> <li>Napi\u0161te path operation funkci (like <code>def root(): ...</code>).</li> <li>Spus\u0165te v\u00fdvojov\u00fd server ( <code>uvicorn main:app --reload</code>).</li> </ul>"},{"location":"tutorial/tutorial/","title":"U\u017eivatelsk\u00e1 p\u0159\u00edru\u010dka","text":"<p>Tento tutori\u00e1l v\u00e1m krok za krokem uk\u00e1\u017ee, jak pou\u017e\u00edvat FastAPI a v\u011bt\u0161inu jeho funkc\u00ed.</p> <p>Ka\u017ed\u00fd d\u00edl postupn\u011b navazuje na p\u0159edchoz\u00ed, ale je strukturov\u00e1n do samostatn\u00fdch t\u00e9mat, tak\u017ee m\u016f\u017eete p\u0159ej\u00edt p\u0159\u00edmo na kter\u00e9koli konkr\u00e9tn\u00ed t\u00e9ma a vy\u0159e\u0161it va\u0161e specifick\u00e9 pot\u0159eby API.</p> <p>Je tak\u00e9 postaven tak, aby fungoval jako budouc\u00ed reference.</p> <p>M\u016f\u017eete se tedy vr\u00e1tit a nal\u00e9zt p\u0159esn\u011b to, co pot\u0159ebujete.</p>"},{"location":"tutorial/tutorial/#instalace","title":"Instalace","text":"<p>Prvn\u00edm krokem je instalace FastAPI.</p> <p>Pro tento tutori\u00e1l nainstalujte se v\u0161emi voliteln\u00fdmi z\u00e1vislostmi a funkcemi:</p> <pre><code>$ pip install \"fastapi[all]\"\n\n---&gt; 100%\n</code></pre> <p>... obsahuje tak\u00e9 <code>uvicorn</code>, kter\u00fd m\u016f\u017eete pou\u017e\u00edt jako server, na kter\u00e9m b\u011b\u017e\u00ed v\u00e1\u0161 k\u00f3d.</p> <p>Pozn\u00e1mka</p> <p>M\u016f\u017eete tak\u00e9 nainstalovat po \u010d\u00e1stech. Toto byste pravd\u011bpodobn\u011b ud\u011blali, jakmile budete cht\u00edt nasadit aplikaci do produkce:     <pre><code>pip install fastapi\n</code></pre></p> <p>Nainstalujte tak\u00e9 <code>uvicorn</code>, aby fungoval jako server:     <pre><code>pip install \"uvicorn[standard]\"\n</code></pre></p> <p>A tot\u00e9\u017e pro ka\u017edou z voliteln\u00fdch z\u00e1vislost\u00ed, kter\u00e9 chcete pou\u017e\u00edt.</p>"},{"location":"tutorial/tutorial/#spousteni-kodu","title":"Spou\u0161t\u011bn\u00ed k\u00f3du","text":"<p>V\u0161echny bloky k\u00f3du lze kop\u00edrovat a pou\u017e\u00edvat p\u0159\u00edmo (jsou to vlastn\u011b testovan\u00e9 soubory Pythonu). Chcete-li spustit n\u011bkter\u00fd z p\u0159\u00edklad\u016f (v dal\u0161\u00ed sekci), zkop\u00edrujte k\u00f3d do souboru <code>main.py</code> a za\u010dn\u011bte <code>uvicorn</code> takto:</p> <pre><code>$ uvicorn main:app --reload\n\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Started reloader process [28720]\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Started server process [28722]\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Waiting for application startup.\n&lt;span style=\"color: green;\"&gt;INFO&lt;/span&gt;:     Application startup complete.\n</code></pre> <p>Je doporu\u010deno, abyste k\u00f3d napsali nebo zkop\u00edrovali, upravili a spustili lok\u00e1ln\u011b.</p> <p>Jeho pou\u017eit\u00ed ve va\u0161em editoru je to, co v\u00e1m skute\u010dn\u011b uk\u00e1\u017ee v\u00fdhody FastAPI, uvid\u00edte, jak m\u00e1lo k\u00f3du mus\u00edte napsat, v\u0161echny kontroly typu, automatick\u00e9 dokon\u010dov\u00e1n\u00ed atd.</p>"}]}